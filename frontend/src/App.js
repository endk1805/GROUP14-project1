import React, { useState, useEffect } from 'react';
import axios from 'axios';
import UserList from './components/UserList';
import AddUser from './components/AddUser';
import Toast from './components/Toast';
import './App.css';

// ƒê·ªãnh nghƒ©a URL c·ªßa backend ƒë·ªÉ d·ªÖ d√†ng thay ƒë·ªïi khi c·∫ßn.
// N·∫øu mu·ªën override, ƒë·∫∑t REACT_APP_API_URL (v√≠ d·ª•: http://api.example.com/api)
const API_URL = (process.env.REACT_APP_API_URL && process.env.REACT_APP_API_URL.replace(/\/$/, '')) || 'http://localhost:8080/api';

function App() {
    // T·∫°o bi·∫øn tr·∫°ng th√°i 'users' ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch ng∆∞·ªùi d√πng
    const [users, setUsers] = useState([]);
    // Search v√† loading state
    const [query, setQuery] = useState('');
    const [loading, setLoading] = useState(false);
    
    // State cho toast notification
    const [toast, setToast] = useState(null);

    // H√†m hi·ªÉn th·ªã toast
    const showToast = (message, type = 'success') => {
        setToast({ message, type });
    };

    // useEffect l√† m·ªôt "hook" ƒë·∫∑c bi·ªát c·ªßa React.
    // Code b√™n trong n√≥ s·∫Ω ƒë∆∞·ª£c ch·∫°y sau khi component ƒë∆∞·ª£c render l·∫ßn ƒë·∫ßu ti√™n.
    // D·∫•u ngo·∫∑c vu√¥ng [] ·ªü cu·ªëi c√≥ nghƒ©a l√† "ch·ªâ ch·∫°y ƒë√∫ng 1 l·∫ßn duy nh·∫•t".
    useEffect(() => {
        // ƒê·ªãnh nghƒ©a m·ªôt h√†m ƒë·ªÉ g·ªçi API v√† l·∫•y danh s√°ch ng∆∞·ªùi d√πng
        const fetchUsers = async () => {
            try {
                setLoading(true);
                const response = await axios.get(`${API_URL}/users`);
                // Chu·∫©n ho√° m·ªói user ƒë·ªÉ c√≥ tr∆∞·ªùng `id` (UserList, AddUser d√πng `id`)
                const normalized = response.data.map(u => ({ ...u, id: u._id }));
                setUsers(normalized); // C·∫≠p nh·∫≠t danh s√°ch users v·ªõi d·ªØ li·ªáu t·ª´ server
            } catch (error) {
                console.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
            }
            finally {
                setLoading(false);
            }
        };

        fetchUsers(); // G·ªçi h√†m ƒë√≥
    }, []);

    // H√†m n√†y s·∫Ω ƒë∆∞·ª£c truy·ªÅn xu·ªëng cho component AddUser
    const handleUserAdded = async (newUser) => {
        try {
            // G·ª≠i d·ªØ li·ªáu ng∆∞·ªùi d√πng m·ªõi l√™n server b·∫±ng ph∆∞∆°ng th·ª©c POST
            const response = await axios.post(`${API_URL}/users`, newUser);

            // response.data l√† user v·ª´a t·∫°o. Chu·∫©n ho√° ƒë·ªÉ c√≥ `id`.
            const created = { ...response.data, id: response.data._id };

            // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng tr√™n giao di·ªán m√† kh√¥ng c·∫ßn t·∫£i l·∫°i trang
            setUsers(prev => [created, ...prev]); // th√™m l√™n ƒë·∫ßu
            showToast('‚ú® Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi th√™m ng∆∞·ªùi d√πng:", error);
            showToast('‚ùå Kh√¥ng th·ªÉ th√™m ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
        }
    };

    // H√†m x√≥a ng∆∞·ªùi d√πng
    const handleDeleteUser = async (userId) => {
        try {
            await axios.delete(`${API_URL}/users/${userId}`);
            // C·∫≠p nh·∫≠t danh s√°ch b·∫±ng c√°ch lo·∫°i b·ªè user ƒë√£ x√≥a
            setUsers(prev => prev.filter(user => user.id !== userId));
            showToast('üóëÔ∏è ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
            showToast('‚ùå Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
        }
    };

    // H√†m c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
    const handleUpdateUser = async (userId, updatedUser) => {
        try {
            const response = await axios.put(`${API_URL}/users/${userId}`, updatedUser);
            // C·∫≠p nh·∫≠t danh s√°ch v·ªõi th√¥ng tin m·ªõi
            const updated = { ...response.data, id: response.data._id };
            setUsers(prev => prev.map(user => user.id === userId ? updated : user));
            showToast('‚úèÔ∏è C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
            showToast('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
        }
    };

    return (
        <div className="App">
            <h1>üéØ Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</h1>
            <div className="app-toolbar">
                <div className="search-wrap">
                    <input
                        aria-label="T√¨m ki·∫øm ng∆∞·ªùi d√πng"
                        className="search-input"
                        placeholder="T√¨m theo t√™n ho·∫∑c email..."
                        value={query}
                        onChange={(e) => setQuery(e.target.value)}
                    />
                </div>
                {loading && (
                    <div className="spinner" aria-hidden="true"></div>
                )}
            </div>

            <div className="app-container">
                {/* Truy·ªÅn h√†m handleUserAdded xu·ªëng cho AddUser */}
                <AddUser onUserAdded={handleUserAdded} />
                {/* Truy·ªÅn danh s√°ch users v√† c√°c h√†m x·ª≠ l√Ω xu·ªëng cho UserList */}
                <UserList 
                    users={users.filter(u => {
                        if (!query.trim()) return true;
                        const q = query.toLowerCase();
                        return u.name.toLowerCase().includes(q) || u.email.toLowerCase().includes(q);
                    })} 
                    onDeleteUser={handleDeleteUser}
                    onUpdateUser={handleUpdateUser}
                />
            </div>
            
            {/* Toast notification */}
            {toast && (
                <Toast
                    message={toast.message}
                    type={toast.type}
                    onClose={() => setToast(null)}
                />
            )}
        </div>
    );
}

export default App;