import React, { useState } from 'react';
import ConfirmModal from './ConfirmModal';
import './UserList.css';

// Component nh·∫≠n c√°c props: users, onDeleteUser, onUpdateUser
const UserList = ({ users, onDeleteUser, onUpdateUser }) => {
    // Qu·∫£n l√Ω tr·∫°ng th√°i ch·ªânh s·ª≠a
    const [editingId, setEditingId] = useState(null);
    const [editName, setEditName] = useState('');
    const [editEmail, setEditEmail] = useState('');

    // Modal x√°c nh·∫≠n x√≥a
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [userToDelete, setUserToDelete] = useState(null);

    // L·∫•y ch·ªØ c√°i ƒë·∫ßu l√†m avatar
    const getInitials = (name = '') => name.charAt(0)?.toUpperCase() || '?';

    // B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a
    const startEditing = (user) => {
        setEditingId(user._id); // ‚úÖ d√πng _id thay v√¨ id
        setEditName(user.name);
        setEditEmail(user.email);
    };

    // H·ªßy ch·ªânh s·ª≠a
    const cancelEditing = () => {
        setEditingId(null);
        setEditName('');
        setEditEmail('');
    };

    // L∆∞u thay ƒë·ªïi
    const saveEdit = (userId) => {
        if (editName.trim() && editEmail.trim()) {
            onUpdateUser(userId, { name: editName, email: editEmail });
            cancelEditing();
        }
    };

    // X√°c nh·∫≠n x√≥a
    const confirmDelete = (user) => {
        setUserToDelete(user);
        setShowDeleteModal(true);
    };

    // Th·ª±c hi·ªán x√≥a sau khi x√°c nh·∫≠n
    const handleDeleteConfirmed = () => {
        if (userToDelete) {
            onDeleteUser(userToDelete._id); // ‚úÖ d√πng _id
            setShowDeleteModal(false);
            setUserToDelete(null);
        }
    };

    const closeModal = () => {
        setShowDeleteModal(false);
        setUserToDelete(null);
    };

    return (
        <div className="user-list-container">
            <h2>Danh S√°ch Ng∆∞·ªùi D√πng</h2>
            {users.length > 0 && (
                <div className="user-count">
                    T·ªïng s·ªë: {users.length} ng∆∞·ªùi d√πng
                </div>
            )}
            {users.length === 0 ? (
                <div className="no-users">
                    Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o. <br /> H√£y th√™m ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n!
                </div>
            ) : (
                <ul className="users-list">
                    {users.map((user, index) => (
                        <li key={user._id || index} className="user-item">
                            {editingId === user._id ? (
                                // üîß Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
                                <div className="edit-mode">
                                    <div className="user-avatar">
                                        {getInitials(editName || user.name)}
                                    </div>
                                    <div className="edit-form">
                                        <input
                                            type="text"
                                            value={editName}
                                            onChange={(e) => setEditName(e.target.value)}
                                            className="edit-input"
                                            placeholder="T√™n ng∆∞·ªùi d√πng"
                                        />
                                        <input
                                            type="email"
                                            value={editEmail}
                                            onChange={(e) => setEditEmail(e.target.value)}
                                            className="edit-input"
                                            placeholder="Email"
                                        />
                                    </div>
                                    <div className="edit-actions">
                                        <button
                                            onClick={() => saveEdit(user._id)}
                                            className="btn-save"
                                            title="L∆∞u"
                                        >
                                            ‚úì
                                        </button>
                                        <button
                                            onClick={cancelEditing}
                                            className="btn-cancel"
                                            title="H·ªßy"
                                        >
                                            ‚úï
                                        </button>
                                    </div>
                                </div>
                            ) : (
                                // üë§ Ch·∫ø ƒë·ªô xem th√¥ng th∆∞·ªùng
                                <>
                                    <div className="user-avatar">{getInitials(user.name)}</div>
                                    <div className="user-info">
                                        <div className="user-name">{user.name}</div>
                                        <div className="user-email">{user.email}</div>
                                    </div>
                                    <div className="user-actions">
                                        <button
                                            onClick={() => startEditing(user)}
                                            className="btn-edit"
                                            title="S·ª≠a"
                                        >
                                            ‚úèÔ∏è
                                        </button>
                                        <button
                                            onClick={() => confirmDelete(user)}
                                            className="btn-delete"
                                            title="X√≥a"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </>
                            )}
                        </li>
                    ))}
                </ul>
            )}

            {/* üß© Modal x√°c nh·∫≠n x√≥a */}
            <ConfirmModal
                isOpen={showDeleteModal}
                onClose={closeModal}
                onConfirm={handleDeleteConfirmed}
                userName={userToDelete?.name}
            />
        </div>
    );
};

export default UserList;













